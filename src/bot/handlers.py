import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackContext
from typing import Any, Dict, List
from src.data.manager import DataManager
from src.services.analyzer import OpenAIAnalyzer

logger = logging.getLogger(__name__)

class Handlers:
    def __init__(self, data_manager: DataManager, analyzer: OpenAIAnalyzer):
        self.data_manager = data_manager
        self.analyzer = analyzer

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.info(f"Start command from user {update.effective_user.id}")
        await update.message.reply_text(
            "üõ°Ô∏è –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–ª—è Telegram\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π.\n"
            "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
        )

    async def show_commands(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥"""
        commands = [
            "/start - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
            "/commands - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
            "/settings - –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            "/set_sensitivity <1-100> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–æ–≥–æ—Å—Ç—å",
            "/add_ban_word <—Å–ª–æ–≤–æ> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ",
            "/remove_ban_word <—Å–ª–æ–≤–æ> - –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞",
            "/ban_list - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞",
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            "/user_info <@username> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
        ]
        await update.message.reply_text("üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" + "\n".join(commands))

    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings = self.data_manager.settings
        response = (
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings['sensitivity']}%\n"
            f"‚Ä¢ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: {'–≤–∫–ª—é—á–µ–Ω–æ' if settings['auto_delete'] else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}\n"
            f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ –±–∞–Ω–∞: {settings['warn_before_ban']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {len(settings['ban_words'])}"
        )
        await update.message.reply_text(response)

    async def set_sensitivity(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 100")
            return
        
        try:
            level = int(context.args[0])
            if 1 <= level <= 100:
                self.data_manager.settings['sensitivity'] = level
                self.data_manager.save_data()
                await update.message.reply_text(f"‚úÖ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {level}%")
            else:
                await update.message.reply_text("–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")

    async def add_ban_word(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return
        
        word = ' '.join(context.args).lower()
        if word in self.data_manager.settings['ban_words']:
            await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ")
        else:
            self.data_manager.settings['ban_words'].append(word)
            self.data_manager.save_data()
            await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫")

    async def remove_ban_word(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–ª–æ–≤–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        word = ' '.join(context.args).lower()
        if word not in self.data_manager.settings['ban_words']:
            await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ")
        else:
            self.data_manager.settings['ban_words'].remove(word)
            self.data_manager.save_data()
            await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")

    async def show_ban_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        ban_words = self.data_manager.settings['ban_words']
        if not ban_words:
            await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç")
        else:
            words_list = "\n".join(f"‚Ä¢ {word}" for word in ban_words)
            await update.message.reply_text(f"üìã –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n\n{words_list}")

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        stats = self.data_manager.stats
        response = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_checked']}\n"
            f"‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {stats['violations_found']}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['deleted_messages']}\n"
            f"‚Ä¢ –ó–∞–±–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['banned_users']}"
        )
        await update.message.reply_text(response)

    async def show_user_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not context.args:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        user_identifier = context.args[0].lstrip('@')
        user_data = None
        
        for uid, data in self.data_manager.users.items():
            if uid == user_identifier or data.get('username', '').lower() == user_identifier.lower():
                user_data = data
                break
        
        if user_data:
            response = (
                "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
                f"‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: @{user_data.get('username', '–Ω–µ—Ç')}\n"
                f"‚Ä¢ –ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {user_data.get('messages', 0)}\n"
                f"‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–π: {user_data.get('warnings', 0)}\n"
            )
        else:
            response = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        await update.message.reply_text(response)

    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not update.message or not update.message.text:
                return

            message = update.message
            user = message.from_user
            chat = message.chat

            logger.info(f"New message from {user.id} in chat {chat.id}")

            if user.is_bot:
                logger.debug("Ignoring message from bot")
                return

            user_id = str(user.id)
            
            if user_id not in self.data_manager.users:
                self._init_user_data(user)
                
            self._update_user_stats(user_id)
            self.data_manager.stats['messages_checked'] += 1

            ban_word_violation = self._check_ban_words(message.text)
            
            violation = (self._create_ban_word_violation() if ban_word_violation 
                        else await self.analyzer.analyze_message(message.text))

            if violation['violation']:
                await self._process_violation(update, context, user, violation)

            self.data_manager.save_data()

        except Exception as e:
            logger.error(f"Error in handle_message: {str(e)}", exc_info=True)
            if update.message:
                await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")

    def _init_user_data(self, user: Any) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.data_manager.users[str(user.id)] = {
            'username': user.username,
            'first_name': user.first_name,
            'last_name': user.last_name,
            'warnings': 0,
            'messages': 0,
        }

    def _update_user_stats(self, user_id: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.data_manager.users[user_id]['messages'] += 1

    def _check_ban_words(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        return any(word in text.lower() for word in self.data_manager.settings['ban_words'])

    def _create_ban_word_violation(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        return {
            "spam": 90, "toxic": 40, "danger": 70,
            "violation_score": 90, "violation": True,
            "reason": "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"
        }

    async def _process_violation(self, update: Update, context: CallbackContext, 
                               user: Any, violation: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ"""
        self.data_manager.stats['violations_found'] += 1
        user_id = str(user.id)
        self.data_manager.users[user_id]['warnings'] += 1

        warning_msg = await self._send_warning(update, context, user, violation)
        
        if self.data_manager.settings['auto_delete']:
            await self._delete_violation_message(update.message, context, warning_msg)

        if self.data_manager.users[user_id]['warnings'] >= self.data_manager.settings['warn_before_ban']:
            await self._ban_user(update, context, user, violation)

    async def _send_warning(self, update: Update, context: CallbackContext,
                          user: Any, violation: Dict[str, Any]) -> Any:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        warning_text = (
            f"üö® –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª!\n"
            f"‚ñ´Ô∏è –ü—Ä–∏—á–∏–Ω–∞: {violation['reason']}\n"
            f"‚ñ´Ô∏è –û–±—â–∏–π –±–∞–ª–ª: {violation['violation_score']}%\n"
            f"‚ñ´Ô∏è –°–ø–∞–º: {violation['spam']}%\n"
            f"‚ñ´Ô∏è –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {violation['toxic']}%\n"
            f"‚ñ´Ô∏è –û–ø–∞—Å–Ω–æ—Å—Ç—å: {violation['danger']}%\n\n"
            f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {self.data_manager.users[str(user.id)]['warnings']}/"
            f"{self.data_manager.settings['warn_before_ban']}"
        )
        return await context.bot.send_message(
            update.message.chat.id,
            warning_text,
            reply_to_message_id=update.message.message_id
        )

    async def _delete_violation_message(self, message: Any, 
                                      context: CallbackContext,
                                      warning_msg: Any) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º"""
        try:
            await message.delete()
            self.data_manager.stats['deleted_messages'] += 1
        except Exception as e:
            logger.error(f"Failed to delete message: {str(e)}")
            await warning_msg.edit_text(
                f"{warning_msg.text}\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
            )

    async def _ban_user(self, update: Update, context: CallbackContext,
                      user: Any, violation: Dict[str, Any]) -> None:
        """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await context.bot.ban_chat_member(update.message.chat.id, user.id)
            self.data_manager.stats['banned_users'] += 1
            await context.bot.send_message(
                update.message.chat.id,
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è!"
            )
        except Exception as e:
            logger.error(f"Failed to ban user {user.id}: {str(e)}")
            raise

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=True)
        if update and update.message:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")